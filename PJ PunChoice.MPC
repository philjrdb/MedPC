\-------------------------------------------------------------------------
\PJ Pun choice
\Version 1.0
\By Phil JRDB (26 Feb 2018)
\-------------------------------------------------------------------------

\Inputs
^LeftLever = 1
^RightLever = 2
^Magazine = 3

\Outputs
^LeftOut = 1
^RightOut = 2
^Pellet = 3
^LeftLight = 4
^RightLight = 5
^Halo = 6
^HouseLight = 7
^Shock = 8
^TDT1 = 9
^TDT2 = 10
^TDT3 = 11
^TDT4 = 12
^TDT5 = 13
^TDT6 = 14
^TDT7 = 15
^TDTshock = 16

\Z-Pulses
\Z1 ^Omnom = 17
\Z2 ^NewTrial = 18
\Z3 ^Shutdown = 19
\Z4 ^OffHalo = 20
\Z5 ^ShockOp = 21
\Z6 ^Pip = 22
\Z7 ^Noise = 23
\Z8 ^TDTpuntrial = 24 (not used anymore)
\Z9 ^TDTunptrial = 25 (not used anymore)
\Z10 ^TDTpunLP = 26
\Z11 ^TDTpunmag = 27
\Z12 ^TDTunpLP = 28
\Z13 ^TDTunpmag = 29

\K-Pulses
\K1 ^Pip1 = 18
\K2 ^Noise1 = 19
\K3 ^Shock1 = 20

\K4 ^Pip2 = 21
\K5 ^Noise2 = 22
\K6 ^Shock2 = 23

\K7 ^Pip3 = 24
\K8 ^Noise3 = 25
\K9 ^Shock3 = 26

\K10 ^Pip4 = 27
\K11 ^Noise4 = 28
\K12 ^Shock4 = 29

\DATA - TOTALS
DIM A = 14
\A(0) = Punished Lever
\A(1) = Unpunished Lever
\A(2) = Rewards
\A(3) = Mag Entries
\A(4) = Halo deliveries

\A(12) = PunSupprRatio (A(0)/(A(0)+A(1)))
\A(13) = PunMagRatio (A(3)/(A(3)+A(11)))

\DATA - TIMECOURSE
DIM B = 100000    \Event identity (Subscript D)
        \1 NewTrial, 2 PunLP, 3 UnpLP, 4 Pellet, 5 Mag, 6 Pip, 7 Noise, 8 Shock, 9 MagHalo
DIM C = 100000    \Event time      (Subscript D)

\DATA - TIMEBINS
DIM G = 1000    \Punished Lever,       Subscript T
DIM H = 1000    \Unpunished Lever,     Subscript T
DIM I = 1000    \Rewards,              Subscript T
DIM J = 1000    \Magazine Entries,     Subscript T
DIM K = 1000    \Halo,              Subscript T
DIM E = 1000    \Shocks,          Subscript T

DIM R = 3    \R(0) = PunLP latency, R(1) = UnpLP latency, R(2) = Mag latency

\CONTROL VARIABLES - SESSION OPERATION
DIM X = 15
\X(0) = VI Time
\X(1) = Session Clock
\X(2) = Millisecond Clock
\X(3) = Timebin shifter
\X(4) = Millisecond Trial Clock
\X(5) = Shock Halo Counter
\X(6) = Current Lever    \Left or right
\X(7) = Halo duration (sec)
\X(8) = Pip/noise duration (sec)
\X(9) = Shock duration
\X(10) = Leverpresses until shock
\X(11) = Shock offset (time between punLP and shock)
\X(12) = PunCS Counter
\X(13) = Leverpresses until CS
\X(14) = Shock safety switch

\This list will be initialised into the VI schedule
LIST Y = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30

\CONTROL VARIABLES - SESSION PARAMETERS
DIM Z = 23
var_alias Session Length (min) = Z(0)
var_alias Variable Interval (s) = Z(1)
var_alias No. of Timebins = Z(2)
var_alias Program Version = Z(3)
var_alias Pellet(=1 extinction=0) = Z(4)
var_alias PunLev = Z(5)

\DATA MANAGEMENT
DISKVARS = A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, U, V, X, Y, Z  \
DISKOPTIONS = FULLHEADERS
DISKCOLUMNS = 1
Y2KCOMPLIANT

\-------------------------------------------------------------------------
\State Set 1 - Session Control Program

S.S.1,
S1,    \State 1 sets default variable values.
    0.01": SET Z(0) = 10, Z(1) = 60, Z(2) = Z(0), Z(3) = 1, Z(4) = 1;

    \Seal all the arrays
    SET B(D+1) = -987.987, C(D+1) = -987.987, G(T+1) = -987.987;
    SET H(T+1) = -987.987, I(T+1) = -987.987, J(T+1) = -987.987;
    SET K(T+1) = -987.987 ---> S2

S2,  \Set defaults
    0.01": IF (Z(5) < 1) [@AUTOG, @CHECKSET]
        @AUTOG: IF (BOX = 1) OR (BOX = 5) OR (BOX = 6) OR (BOX = 7)[@PunL, @PunR]
          @PunL: SET Z(5) = 1; SHOW 2, Pun Lever, Z(5) ---> SX
          @PunR: SET Z(5) = 2; SHOW 2, Pun Lever, Z(5) ---> SX
        @CHECKSET: SHOW 2, Pun Lever, Z(5) ---> S3

S3,    \State 2 shows the default variables and responds to start command
    0.5": SHOW 2, Pun Lever, Z(5); ON^TDT1,^TDT2 ---> SX

    #START: SHOW 1, Session Time, X(1); ON^LeftOut, ^RightOut; OFF^TDT1;
    SET STARTHOURS = CURRENTHOURS, STARTMINUTES = CURRENTMINUTES, STARTSECONDS = CURRENTSECONDS ---> S4

S4,    \Session clock and VI modifier
    1": ADD X(1); SHOW 1, Session Time, X(1);
    IF X(1) / 60 >= Z(0) [@TRUE, @FALSE]
        @TRUE: Z3; OFF ^Shock, ^TDTshock, ^LeftOut, ^RightOut; ON^TDT1,^TDT2 ---> S5
        @FALSE: ---> SX

S5,    \End Program
    1": OFF ^Shock, ^Halo, ^LeftOut, ^RightOut, ^TDT1,^TDT2, ^TDTshock;
        ~ToneOff(MG,BOX);~; Z3;
        IF A(0)+A(1) > 0 [@Ratio,@None]
        @Ratio: SET A(12) = A(0)/(A(0)+A(1)) ---> STOPABORTFLUSH
        @None: SET A(12) = -999 ---> STOPABORTFLUSH

\-------------------------------------------------------------------------
\State Set 2 - Pun Lever Counter

S.S.2,
S1,    \State 1 responds to the start command
    #START: IF ((Z(5) > 0.9) AND (Z(5) <1.1)) OR ((Z(5) > 1.9) AND (Z(5) < 2.1)) [@Valid, @Invalid]
        @Valid: IF (Z(5) > 0.9) AND (Z(5) <1.1) [@PunLeft, @PunRight]
                @PunLeft: SHOW 2, Punished LLever, A(0);
                    SHOW 3, Unpunished RLever, A(1) ---> S2
                @PunRight: SHOW 2, Punished RLever, A(0);
                    SHOW 3, Unpunished LLever, A(1) ---> S4
        @Invalid: SHOW 1, Invalid Pun Lever, Z(5) ---> STOPKILL


\\----Pun Left----\\
S2,    \State 2 counts latency for the punished left lever
    #R^LeftLever: Z10; SET R(0) = X(4);
        ADD A(0), G(T); SET B(D) = 2, C(D) = X(2); ADD D;
        SET B(D+1) = -987.987, C(D+1) = -987.987;
        SHOW 2, Punished LLever, A(0); IF S.S.5 = 3 [@REWARD, @HAHA]
            @REWARD: Z1 ---> S3
            @HAHA: ---> S3

    #Z3: SET R(0) = X(4) ---> S1

S3,    \State 3 counts lever presses for the punished left lever
    #R^LeftLever: Z10; ADD A(0), G(T); SET B(D) = 2, C(D) = X(2); ADD D;
        SET B(D+1) = -987.987, C(D+1) = -987.987;
        SHOW 2, Punished LLever, A(0); IF S.S.5 = 3 [@REWARD]
            @REWARD: Z1 ---> SX

    #Z3: ---> S1


\\----Pun Right----\\
S4,    \State 6 counts latency for the punished right lever
    #R^RightLever: Z10; SET R(0) = X(4);
        ADD A(0), G(T); SET B(D) = 2, C(D) = X(2); ADD D;
        SET B(D+1) = -987.987, C(D+1) = -987.987;
        SHOW 2, Punished RLever, A(0); IF S.S.5 = 3 [@REWARD, @HAHA]
            @REWARD: Z1 ---> S5
            @HAHA: ---> S5

    #Z3: SET R(0) = X(4) ---> S1

S5,    \State 7 counts lever presses for the punished right lever
    #R^RightLever: Z10; ADD A(0), G(T); SET B(D) = 2, C(D) = X(2); ADD D;
        SET B(D+1) = -987.987, C(D+1) = -987.987;
        SHOW 2, Punished RLever, A(0); IF S.S.5 = 3 [@REWARD]
            @REWARD: Z1 ---> SX

    #Z3: ---> S1

\-------------------------------------------------------------------------
\State Set 3 - Unp Lever Counter

S.S.3,
S1,    \State 1 responds to the start command
    #START: IF ((Z(5) > 0.9) AND (Z(5) <1.1)) OR ((Z(5) > 1.9) AND (Z(5) < 2.1)) [@Valid, @Invalid]
        @Valid: IF (Z(5) > 1.9) AND (Z(5) <2.1) [@UnpLeft, @UnpRight]
                @UnpLeft: ---> S2
                @UnpRight: ---> S4
        @Invalid: SHOW 1, Invalid Pun Lever, Z(5) ---> STOPKILL


\\----Unp Left----\\
S2,    \State 2 counts latency for the punished left lever
    #R^LeftLever: Z12; SET R(1) = X(4);
        ADD A(1), H(T); SET B(D) = 3, C(D) = X(2); ADD D;
        SET B(D+1) = -987.987, C(D+1) = -987.987;
        SHOW 3, Unpunished RLever, A(1); IF S.S.5 = 3 [@REWARD, @HAHA]
            @REWARD: Z1 ---> S3
            @HAHA: ---> S3

    #Z3: SET R(1) = X(4) ---> S1

S3,    \State 3 counts lever presses for the punished left lever
    #R^LeftLever: Z12; ADD A(1), H(T); SET B(D) = 3, C(D) = X(2); ADD D;
        SET B(D+1) = -987.987, C(D+1) = -987.987;
        SHOW 3, Unpunished RLever, A(1); IF S.S.5 = 3 [@REWARD]
            @REWARD: Z1 ---> SX

    #Z3: ---> S1


\\----Pun Right----\\
S4,    \State 6 counts latency for the punished right lever
    #R^RightLever: Z12; SET R(1) = X(4);
        ADD A(1), H(T); SET B(D) = 3, C(D) = X(2); ADD D;
        SET B(D+1) = -987.987, C(D+1) = -987.987;
        SHOW 3, Unpunished LLever, A(1); IF S.S.5 = 3 [@REWARD, @HAHA]
            @REWARD: Z1 ---> S5
            @HAHA: ---> S5

    #Z3: SET R(U) = X(4); ADD U; SET R(U+11) = -987.987 ---> S1

S5,    \State 7 counts lever presses for the punished right lever
    #R^RightLever: Z12; ADD A(1), H(T); SET B(D) = 3, C(D) = X(2); ADD D;
        SET B(D+1) = -987.987, C(D+1) = -987.987;
        SHOW 3, Unpunished LLever, A(1); IF S.S.5 = 3 [@REWARD]
            @REWARD: Z1 ---> SX

    #Z3: ---> S1

\-------------------------------------------------------------------------
\State Set 4 - Magazine Counter

S.S.4,
S1,    \State 1 responds to the start command
    #START: SET X(7) = Z(8); SET X(7) = X(7) * 1" ---> S2

S2,    \State 2 counts magazine entries
    #R^Magazine: Z11; ADD A(3); ADD J(T); SET R(1) = X(4); SET B(D) = 5, C(D) = X(2); ADD D;
        SET B(D+1) = -987.987, C(D+1) = -987.987; SHOW 4, Mag Entries, A(3) ---> S3

S3,    \State 2 counts magazine entries
    #R^Magazine: Z11; ADD A(3); ADD J(T); SET B(D) = 5, C(D) = X(2); ADD D;
        SET B(D+1) = -987.987, C(D+1) = -987.987; SHOW 4, Mag Entries, A(3) ---> SX

    #Z3: ---> S1

\-------------------------------------------------------------------------
\State Set 5 - Pellet Operator

S.S.5,
S1,    \State 1 responds to the start command
    #START: INITCONSTPROBARR Y, Z(1); RANDD X(0) = Y; SET X(0) = X(0) * 1";
        SHOW 5, Next LP unreinforced, 0 ---> S2

S2,    \State 2 counts down the interval to the reward
    X(0)#T: SHOW 5, Next LP reinforced!, 1 ---> S3

S3,    \State 2 turns on the pellet dispenser, counts reward, restarts VI clock
    #Z1: ON ^Pellet,^TDT5; ADD A(2), I(T); SHOW 14, Pellets, A(2);
        SHOW 5, Next LP unreinforced, 0; SET B(D) = 4, C(D) = X(2); ADD D;
        SET B(D+1) = -987.987, C(D+1) = -987.987 ---> S4

    #Z2: RANDD X(0) = Y; SET X(0) = X(0) * 1";
        SHOW 5, Next LP unreinforced, 0 ---> S2
    #Z3: ---> S1

S4,    \State 3 turns off the pellet dispenser
    0.1": OFF ^Pellet,^TDT5; RANDD X(0) = Y; SET X(0) = X(0) * 1" ---> S2

    #Z3: OFF ^Pellet ---> S1

\-------------------------------------------------------------------------
\State Set 7 - Millisecond clocks

S.S.7,
S1,    \Start the clock
    #START: ---> S2

S2,    \Counting, timebin shifting and new trial shifting

    0.01": SET X(2) = X(2) + 0.01, X(3) = X(3) + 0.01;
    SET X(4) = X(4) + 0.01 ---> SX

    #Z3: ---> S1

\-------------------------------------------------------------------------
S.S.13,
S1,
    #START: ---> s2
s2,
    #Z10: ON^TDT3;OFF^TDT4 ---> s3
    #Z11: ON^TDT5;OFF^TDT3,^TDT4 ---> s3
    #Z12: ON^TDT3,^TDT4 ---> s3
    #Z13: ON^TDT4,^TDT5;OFF^TDT3 ---> s3

    #Z3: ---> S4
s3,
    0.1": OFF^TDT3,^TDT4,^TDT5 ---> s2
    #Z3: ---> S4
s4,
    0.1": OFF^TDT3,^TDT4,^TDT5 ---> s5
s5,
    #Z3: ---> sx

\-------------------------------------------------------------------------
\Changelog:
\(DD/MM/YYYY)
\v1.0 (2020-11-29) - based on PJfibpho PunChoice v1.2
