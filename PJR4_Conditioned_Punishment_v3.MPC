\-------------------------------------------------------------------------
\PJR4 Conditioned Punishment
\Version 3 (2017-05-21)
\Phil JRDB, based on Shaun Khoo (ORCID: 0000-0002-0972-3788)
\-------------------------------------------------------------------------

\Control Constants
^SessionLength = 60        \Session length in minutes
^Timebins = 60            \Number of timebins
^VISchedulePunish = 30        \Variable Interval Schedule (s), pellet, left lever
^VIScheduleUnpunish = 30    \Variable Interval Schedule (s), pellet, right lever
^CS Duration = 10        \Conditioned Stimulus Duration (s)
^PunishLever = 0        \Determines which lever is punished, 1 for left, 2 for right
^PunishCue = 0            \Determines which cue is associated with the punished lever, 1 for lights, 2 for Clicker
\^LeftCue = 1            \Determines cue associated with left lever, 1 for lights, 2 for Clicker
\^RightCue = 2            \Determines cue associated with right lever, 1 for lights, 2 for Clicker
^ClickFreq = 10            \Frequency of Clicker (Hz)
^ClickAmp = 240            \Amplitude in dB
^LightFlash = 5            \Light On/Off time in deciseconds
^Version = 300            \Program version /100

\Inputs
^LeftLever = 1
^RightLever = 2
^Magazine = 3

\Outputs
^LeftOut = 1
^RightOut = 2
^Pellet = 3
^LeftLight = 4
^RightLight = 5
^Dipper = 6
^HouseLight = 7
^Shock = 8

\Z-Pulses
^Omnom = 1
^NomUnpunished = 2
^CuePunish = 3
^CueUnpunish = 4
^FLightsON = 5
^CueOFF = 6    \This also doubles as a cue-complete Z-pulse
^Shutdown = 8

\DATA - TOTALS
DIM A = 74
\A(0) = Punished Lever Totals
\A(1) = Unpunished Lever Totals
\A(2) = Punished Lever Press ITI
\A(3) = Unpunished Lever Press ITI
\A(4) = Punished Lever Press CS-P
\A(5) = Unpunished Lever Press CS-P
\A(6) = Punished Lever Press CS-UP
\A(7) = Unpunished Lever Press CS-UP
\A(8) = Pellets delivered
\A(9) = Magazine Entries
\A(10) = Number of CS-P Presentations
\A(11) = Number of CS-UP Presentations
\A(12) = Total ITI Time
\A(13) = Total Time CS-P
\A(14) = Total Time CS-UP
\A(15) = Latency to first Punished lever press ITI
\A(16) = Latency to first Unpunished lever press ITI
\A(17) = Latency to first Punished lever press CS-P
\A(18) = Latency to first Unpunished lever press CS-P
\A(19) = Latency to first Punished lever press CS-UP
\A(20) = Latency to first Unpunished lever press CS-UP
\A(21) = Latency to first pellet
\A(22) = Latency to first magazine entry

\DATA - LP RATES (/min)
\A(58) = Overall rate { (A(0)+A(1))/(A(38))*60}
\A(59) = Overall punLP { A(0)/(A(38))*60 }
\A(60) = Overall unpLP { A(1)/(A(38))*60 }
\A(61) = Pun ITI { A(2)/A(12)*60 }
\A(62) = Unp ITI { A(3)/A(12)*60 }
\A(63) = Pun CS-P { A(4)/A(13)*60 }
\A(64) = Unp CS-P { A(5)/A(13)*60 }
\A(65) = Pun CS-UP { A(6)/A(14)*60 }
\A(66) = Unp CS-UP { A(7)/A(14)*60 }

\DATA - SUPPRESSION RATIOS
\A(67) = A(2)/(A(2)+A(3))     (Pun suppr: PunLP ITI/Overall LP ITI)
\A(68) = A(63)/(A(61)+A(63))  (Cond suppr (PunP): Pun CS-P rate/(PunCS-P rate + PunITI rate))
\A(69) = (A(63)+A(64))/(A(61)+A(62)+A(63)+A(64))  (Cond suppr (Ptotal): CS-P rates/Pun + UnpITI rates)
\A(70) = A(66)/(A(62)+A(66))  (Cond suppr control (UnpUP): Unp CS-UP rate/(UnpCS-UP rate + UnpITI rate))
\A(71) = (A(66)+A(65))/(A(61)+A(62)+A(66)+A(65))  (Cond suppr control (UPtotal): CS-UP rates/Pun + UnpITI rates)
\A(72) = A(64)/(A(64)+A(66))  (Cond suppr (UnpP): Unp CS-P rate/(UnpCS-P rate + UnpITI rate))
\A(73) = A(65)/(A(65)+A(61))  (Safety (PunUP): Pun CS-UP rate/(PunCS-UP rate + PunITI rate))

\DATA - EVENT LOG
DIM B = 50000        \All event times,         subscript T/A(47)
DIM C = 50000        \All event identities,         subscript T/A(47)
\Event Log Identity List
\1 - Punished Lever Press
\1.1 - Punished Lever Press in ITI time
\1.2 - Punished Lever Press during CS-P
\1.3 - Punished Lever Press during CS-UP
\2 - Unpunished Lever Press
\2.1 - Unpunished Lever Press in ITI time
\2.2 - Unpunished Lever Press during CS-P
\2.3 - Unpunished Lever Press during CS-UP
\3 - Pellet Delivery
\5 - Magazine entry
\6 - CS Presentation
\6.1 - Flashing Lights
\6.2 - Clicker
\8 - Shock

\DATA - TIMEBINS
DIM D = 1000        \Punished lever presses ITI,        subscript T/A(48)
DIM E = 1000        \Unpunished lever presses ITI,        subscript T/A(48)
DIM F = 1000        \Punished lever presses CS-P,        subscript T/A(48)
DIM G = 1000        \Unpunished lever presses CS-P,        subscript T/A(48)
DIM H = 1000        \Punished lever press CS-UP,        subscript T/A(48)
DIM I = 1000        \Unpunished lever press CS-UP,        subscript T/A(48)
DIM J = 1000        \Rewards,                subscript T/A(48)
DIM K = 1000        \Magazine entries,            subscript T/A(48)

\DATA - TIMECOURSE
DIM L = 50000        \All Punished lever presses ITI,    subscript T/A(49)
DIM M = 50000        \All Unpunished lever presses ITI,    subscript T/A(50)
DIM N = 50000        \All Punished lever presses CS-P,    subscript T/A(51)
DIM O = 50000        \All Unpunished lever presses CS-P,    subscript T/A(52)
DIM P = 50000        \All Punished lever presses CS-UP,    subscript T/A(53)
DIM Q = 50000        \All Unpunished lever presses CS-UP,    subscript T/A(54)
DIM R = 50000        \All rewards,                subscript T/A(55)
DIM S = 50000        \All magazine entries,            subscript T/A(56)

\CONTROL VARIABLES - SESSION OPERATION
\A(38) = Session Clock
\A(39) = Centisecond Clock
\A(40) = Timebin shifter
\A(41) = CS VI Schedule Punished
\A(42) = CS VI Schedule Unpunished
\A(43) = VI Schedule Punished
\A(44) = VI Schedule Unpunished
\A(45) = CS Duration
\A(46) = Light Duration
\A(47) = Subscript for arrays B & C
\A(48) = Subscript for arrays D-K (Timebins)
\A(49) = Subscript for array L
\A(50) = Subscript for array M
\A(51) = Subscript for array NF
\A(52) = Subscript for array O
\A(53) = Subscript for array P
\A(54) = Subscript for array Q
\A(55) = subscript for array R
\A(56) = subscript for array S
\A(57) = CS duration before shock

\VARIABLES U AND V USED TO SET CLICKER PARAMETERS

\VI LISTS - These lists will be initialised into VI schedules
\VI LIST - Punished LEVER PELLET ITI
LIST W = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60

\VI LIST - Punished LEVER CS ITI
LIST X = 30, 40, 50, 60, 70, 80, 90

\VI LIST - Unpunished LEVER PELLET ITI
LIST Y = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60

\VI LIST - Unpunished LEVER CS ITI
LIST Z = 30, 40, 50, 60, 70, 80, 90

\CONTROL VARIABLES - SESSION PARAMETERS
var_alias Session Length (min) = A(23)
var_alias No. of Timebins = A(24)
var_alias Variable Interval Schedule (Punished) = A(27)
var_alias Variable Interval Schedule (Unpunished) = A(28)
var_alias CS Duration (s) = A(29)
var_alias Punished Lever = A(30)
var_alias Punished Cue (1Light 2Click) = A(32)
var_alias Clicker Frequency (Hz) = A(33)
var_alias Clicker Amplitude (dB) = A(34)
var_alias Light Flash Time (s) = A(35)
var_alias Program Version = A(37)

\DATA MANAGEMENT
DISKVARS = A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, W, X, Y, Z
DISKOPTIONS = FULLHEADERS
DISKCOLUMNS = 1
Y2KCOMPLIANT

\-------------------------------------------------------------------------
\State Set 1 - Session Control Program

S.S.1,
S1,    \State 1 sets default variable values
    0.01": SET A(23) = ^SessionLength, A(24) = ^Timebins;
    SET A(27) = ^VISchedulePunish, A(28) = ^VIScheduleUnpunish;
    SET A(29) = ^CS Duration, A(33) = ^ClickFreq, A(34) = ^ClickAmp;
    SET A(35) = (^LightFlash / 10), A(37) = ^Version / 100;

    \Seal all the arrays
    SET B(1) = -987.987, C(1) = -987.987, D(1) = -987.987, E(1) = -987.987;
    SET F(1) = -987.987, G(1) = -987.987, H(1) = -987.987, I(1) = -987.987;
    SET J(1) = -987.987, K(1) = -987.987, L(1) = -987.987, M(1) = -987.987;
    SET N(1) = -987.987, O(1) = -987.987, P(1) = -987.987, Q(1) = -987.987;
    SET R(1) = -987.987, S(1) = -987.987;

    SHOW 1, Session Length (min), A(23), 4, PunPelletVI, A(27), 5, UnpPelletVI, A(28);
    SHOW 6, Timebins, A(24), 7, CS Duration, A(29), 8, Click Freq (Hz), A(33);
    SHOW 9, Click Amplitude (dB), A(34), 10, Light flash(sec), A(35);

    IF ((A(30) < 1) OR (A(32) < 1)) [@AUTOG, @CHECKSET]
        @AUTOG: IF (BOX = 1) OR (BOX = 2) [@ONE, @NEXT2]
          @ONE: SET A(30) = 1, A(32) = 1 ---> SX
          @NEXT2: IF (BOX = 3) OR (BOX = 4) [@TWO, @NEXT3]
            @TWO: SET A(30) = 1, A(32) = 2 ---> SX
            @NEXT3: IF (BOX = 5) OR (BOX = 6) [@THREE, @NEXT4]
              @THREE: SET A(30) = 2, A(32) = 1 ---> SX
              @NEXT4: IF (BOX = 7) OR (BOX = 8) [@FOUR, @Error]
                @FOUR: SET A(30) = 2, A(32) = 2 ---> SX
                @Error: SHOW 2, Error: Pun Lever, A(30), 3, Error: Pun Cue, A(32) ---> S2
        @CHECKSET: SHOW 2, Pun Lever, A(30), 3, Pun Cue (1Light 2Click), A(32) ---> S2

S2,    \State 2 responds to the start command
    #START: CLEAR 1, 5; SHOW 1, Session Time, A(38);
    ON ^Houselight;
    SET L(0) = A(23) * 60, M(0) = A(23) * 60;
    SET N(0) = A(23) * 60, O(0) = A(23) * 60;
    SET P(0) = A(23) * 60, Q(0) = A(23) * 60;
    SET R(0) = A(23) * 60, S(0) = A(23) * 60;
    SET U = A(33), V = A(34);
    ~InitANL926;~; ~SetFreq(MG,BOX,0);~; ~SetRF(MG,BOX,10);~;
    ~SetClickFreq(MG,BOX,U);~; ~SetAmp(MG,BOX,V);~;
    ON ^LeftOut, ^RightOut;    IF A(30) < 1.5 [@PUNISHLEFT, @PUNISHRIGHT]
        @PUNISHLEFT: SET A(30) = ^LeftLever, A(31) = ^RightLever ---> S3
        @PUNISHRIGHT: SET A(30) = ^RightLever, A(31) = ^LeftLever ---> S3

S3,    \State 3 is the session clock
    1": ADD A(38); SHOW 1, Session Time, A(38);
    IF (A(38) / 60 >= A(23)) AND ((S.S.5 <= 3) AND (S.S.8 <= 3)) [@TRUE, @FALSE]
        @TRUE: Z^Shutdown; OFF ^LeftOut, ^RightOut;
            SET A(15) = L(0), A(16) = M(0), A(17) = N(0);
            SET A(18) = O(0), A(19) = P(0), A(20) = Q(0);
            SET A(21) = R(0), A(22) = S(0) ---> S4
        @FALSE: ---> SX

S4,    \State 4 calculates rates, ratios and ends the program
    1": SET A(12) = A(38) - A(13) - A(14), A(58) = (A(0)+A(1))/(A(38))*60;
        SET A(59) = A(0)/A(38)*60, A(60) = A(1)/A(38)*60;
        SET A(61) = A(2)/A(12)*60, A(62) = A(3)/A(12)*60;
        SET A(63) = A(4)/A(13)*60, A(64) = A(5)/A(13)*60;
        SET A(65) = A(6)/A(14)*60, A(66) = A(7)/A(14)*60;

        SET A(67) = A(2)/(A(2)+A(3)), A(68) = A(63)/(A(61)+A(63));
        SET A(69) = (A(63)+A(64))/(A(61)+A(62)+A(63)+A(64)), A(70) = A(66)/(A(62)+A(66));
        SET A(71) = (A(65)+A(66))/(A(61)+A(62)+A(65)+A(66)), A(72) = A(64)/(A(64)+A(66));
        SET A(73) = A(65)/(A(65)+A(61)) ---> STOPABORTFLUSH

\-------------------------------------------------------------------------
\State Set 2 - Centisecond clocks

S.S.2,
S1,    \State 1 responds to the start command
    #START: ---> S2

S2,    \State 2 times 1 centisecond increments, timebin shifting
    0.01": SET A(39) = A(39) + 0.01, A(40) = A(40) + 0.01;
    IF (A(40) / 60 >= A(23) / A(24)) AND ((A(48) + 1) < A(24)) [@SHIFT, @STAY]
        @SHIFT: SET A(40) = 0; ADD A(48); SET T = A(48);
            SET D(T) = 0, E(T) = 0, F(T) = 0, G(T) = 0;
            SET H(T) = 0, I(T) = 0, J(T) = 0, K(T) = 0;
            SET D(T+1) = -987.987, E(T+1) = -987.987;
            SET F(T+1) = -987.987, G(T+1) = -987.987;
            SET H(T+1) = -987.987, I(T+1) = -987.987;
            SET J(T+1) = -987.987, K(T+1) = -987.987 ---> SX
        @STAY: ---> SX

    #Z^Shutdown: ---> S1

\-------------------------------------------------------------------------
\State Set 3 - Punished Lever

S.S.3,
S1,    \State 1 responds to the start command
    #START: SHOW 2, PunLP Total, A(0) ---> S2

S2,    \State 2 responds to active Punished lever presses during ITI time
    #RA(30): ADD A(0), A(2);
    SET T = A(47), B(T) = A(39), C(T) = 1.1; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD D(T); SET T = A(49); SET L(T) = A(39);
    ADD A(49); SET T = A(49), L(T) = -987.987;
    SHOW 2, PunLP Total, A(0), 17, PunLP ITI, A(2);
    IF ((S.S.4 = 3) OR (S.S.5 = 3)) AND (S.S.6 < 3) [@EVENT, @NULL]
        @EVENT: IF S.S.5 = 3 [@CUE, @CHECK]
            @CUE: ADD A(10); SHOW 6, CS-P, A(10); Z^CuePunish ---> S4
            @CHECK: IF S.S.4 = 3 [@PELLET, @ERROR]
                @PELLET: Z^Omnom ---> S3
                @ERROR: SHOW 1, ERROR S.S.3 S2, A(0) ---> STOPKILL
        @NULL: ---> SX

    #Z^Shutdown: ---> S9
    #Z^CueUnpunish: ---> S6

S3,    \State 3 is 2sec holdover for ITI pellet (cannot trigger a CS)
    2": ---> S2

    #RA(30): ADD A(0), A(2);
    SET T = A(47), B(T) = A(39), C(T) = 1.1; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD D(T); SET T = A(49); SET L(T) = A(39);
    ADD A(49); SET T = A(49), L(T) = -987.987;
    SHOW 2, PunLP Total, A(0), 17, PunLP ITI, A(2);
    IF (S.S.4 = 3) [@PELLET, @NULL]
        @PELLET: Z^Omnom ---> S3
        @NULL: ---> SX

    #Z^CueUnpunish: ---> S6

S4,    \State 4 PunLP during start of CS-P (no pellets)
    2": ---> S5

    #RA(30): ADD A(0), A(4);
    SET T = A(47), B(T) = A(39), C(T) = 1.2; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD F(T); SET T = A(51); SET N(T) = A(39);
    ADD A(51); SET T = A(51), N(T) = -987.987;
    SHOW 2, PunLP Total, A(0), 7, PunLP CS-P, A(4) ---> SX

    #Z^CueOFF: ---> S8

S5,    \State 5 PunLP and pellets during rest of CS-P
    #RA(30): ADD A(0), A(4);
    SET T = A(47), B(T) = A(39), C(T) = 1.2; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD F(T); SET T = A(51); SET N(T) = A(39);
    ADD A(51); SET T = A(51), N(T) = -987.987;
    SHOW 2, PunLP Total, A(0), 7, PunLP CS-P, A(4);
    IF (S.S.4 = 3) [@PELLET, @NULL]
        @PELLET: Z^Omnom ---> SX
        @NULL: ---> SX

    #Z^CueOFF: ---> S8

S6,    \State 6 PunLP during start of CS-UP (no pellets)
    2": ---> S7

    #RA(30): ADD A(0), A(6);
    SET T = A(47), B(T) = A(39), C(T) = 1.3; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD H(T); SET T = A(53); SET P(T) = A(39);
    ADD A(53); SET T = A(53), P(T) = -987.987;
    SHOW 2, PunLP Total, A(0), 12, PunLP CS-UP, A(6) ---> SX

    #Z^CueOFF: ---> S8

S7,    \State 5 PunLP and pellets during rest of CS-UP
    #RA(30): ADD A(0), A(6);
    SET T = A(47), B(T) = A(39), C(T) = 1.3; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD H(T); SET T = A(53); SET P(T) = A(39);
    ADD A(53); SET T = A(53), P(T) = -987.987;
    SHOW 2, PunLP Total, A(0), 12, PunLP CS-UP, A(6);
    IF (S.S.4 = 3) [@PELLET, @NULL]
        @PELLET: Z^Omnom ---> SX
        @NULL: ---> SX

    #Z^CueOFF: ---> S8

S8,    \State 6 is 2sec holdover for CSoff (cannot trigger CS or pellet)
    2": ---> S2

    #RA(30): ADD A(0), A(2);
    SET T = A(47), B(T) = A(39), C(T) = 1.1; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD D(T); SET T = A(49); SET L(T) = A(39);
    ADD A(49); SET T = A(49), L(T) = -987.987;
    SHOW 2, PunLP Total, A(0), 17, PunLP ITI, A(2) ---> SX

S9,    \State 9 is the shutdown holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\State Set 4 - Pellet Dispenser (Punished)

S.S.4,
S1,    \State 1 responds to the start command, establishing schedule
    #START: INITCONSTPROBARR W, A(27);
    RANDD A(43) = W; SET A(43) = (A(43) - 0.5) * 1";
    SHOW 4, Pellets Delivered, A(8) ---> S2

S2,    \State 2 waits to make a pellet available
    A(43)#T: SHOW 2, Pun Pellet Available, 1 ---> S3

    #Z^Shutdown: ---> S5

S3,    \State 3 waits for a lever press to deliver the pellet
    #Z^Omnom: ON ^Pellet; ADD A(8);
    SET T = A(47), B(T) = A(39), C(T) = 3; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD J(T); SET T = A(55), R(T) = A(39);
    ADD A(55); SET T = A(55), R(T) = -987.987;
    SHOW 4, Pellets Delivered, A(8) ---> S4

    #Z^Shutdown: ---> S5

S4,    \State 4 turns off the pellet dispenser
    0.5": OFF ^Pellet; RANDD A(43) = W; SET A(43) = (A(43) - 0.5) * 1" ---> S2

    #Z^Shutdown: OFF ^Pellet ---> S5

S5,    \State 5 is a holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\State Set 5 - Punished Lever Cue Operator

S.S.5,
S1,    \State 1 responds to the start command, establishing schedule
    #START: SHOW 9, PunCS in ITI, 0; RANDD A(41) = X; SET A(41) = A(41) * 1";
    SET A(45) = A(29) * 1", A(57) = (A(29) - 0.5) * 1" ---> S2

S2,    \State 2 waits to make a Punished CS available
    A(41)#T: SHOW 9, PunCS Available, 1 ---> S3

    #Z^Shutdown: ---> S6

S3,    \State 3 waits for a lever press to deliver the CS
    #Z^CuePunish: SHOW 9, PunCS active, 9;
        IF A(32) < 1.5 [@FLights, @CLICK]
        @FLights: Z^FLightsON; SET T = A(47), B(T) = A(39), C(T) = 6.1;
            ADD A(47); SET T = A(47), B(T) = -987.987, C(T) = -987.987;
            SET A(13) = A(13) + A(29) ---> S4
        @CLICK: ~ClickOn(MG,BOX);~; SET T = A(47), B(T) = A(39), C(T) = 6.2;
            ADD A(47); SET T = A(47), B(T) = -987.987, C(T) = -987.987;
            SET A(13) = A(13) + A(29) ---> S4

    #Z^Shutdown: ---> S6

S4,    \State 4 runs a punished CS
    A(57)#T: On^Shock; SET T = A(47), B(T) = A(39), C(T) = 8;
    ADD A(47); SET T = A(47), B(T) = -987.987, C(T) = -987.987 ---> S5

S5,    \State 6 turns off the shock
    0.5": OFF^Shock; Z^CueOFF; ~ClickOff(MG,BOX);~; SHOW 9, PunCS in ITI, 0;
        RANDD A(41) = X; SET A(41) = A(41) * 1" ---> S2

S6,    \State 6 is a holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\State Set 6 - Unpunished Lever

S.S.6,
S1,    \State 1 responds to the start command
    #START: SHOW 3, UnpLP Total, A(1) ---> S2

S2,    \State 2 responds to active left lever presses during ITI time
    #RA(31): ADD A(1), A(3);
    SET T = A(47), B(T) = A(39), C(T) = 2.1; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD E(T); SET T = A(50); SET M(T) = A(39);
    ADD A(50); SET T = A(50), M(T) = -987.987;
    SHOW 3, UnpLP Total, A(1), 18, UnpLP ITI, A(3);
    IF ((S.S.7 = 3) OR (S.S.8 = 3)) AND (S.S.3 < 3) [@EVENT, @NULL]
        @EVENT: IF S.S.8 = 3 [@CUE, @CHECK]
            @CUE: ADD A(11); SHOW 11, CS-UP, A(11); Z^CueUnpunish ---> S6
            @CHECK: IF S.S.7 = 3 [@PELLET, @ERROR]
                @PELLET: Z^NomUnpunished ---> S3
                @ERROR: SHOW 1, ERROR S.S.6 S2, A(0) ---> STOPKILL
        @NULL: ---> SX

    #Z^Shutdown: ---> S9
    #Z^CuePunish: ---> S4

S3,    \State 3 is 2sec holdover for ITI pellet (cannot trigger CS)
    2": ---> S2

    #RA(31): ADD A(1), A(3);
    SET T = A(47), B(T) = A(39), C(T) = 2.1; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD E(T); SET T = A(50); SET M(T) = A(39);
    ADD A(50); SET T = A(50), M(T) = -987.987;
    SHOW 3, UnpLP Total, A(1), 18, UnpLP ITI, A(3);
    IF (S.S.7 = 3) [@PELLET, @NULL]
        @PELLET: Z^NomUnpunished ---> S3
        @NULL: ---> SX

    #Z^CuePunish: ---> S4

S4,    \State 4 UnpLP during start of CS-P (no pellets)
    2": ---> S5

    #RA(31): ADD A(1), A(5);
    SET T = A(47), B(T) = A(39), C(T) = 2.2; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD G(T); SET T = A(52); SET O(T) = A(39);
    ADD A(52); SET T = A(52), O(T) = -987.987;
    SHOW 3, UnpLP Total, A(1), 8, UnpLP CS-P, A(5) ---> SX

    #Z^CueOFF: ---> S8

S5,    \State 5 UnpLP and pellets during rest of CS-P
    #RA(31): ADD A(1), A(5);
    SET T = A(47), B(T) = A(39), C(T) = 2.2; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD G(T); SET T = A(52); SET O(T) = A(39);
    ADD A(52); SET T = A(52), O(T) = -987.987;
    SHOW 3, UnpLP Total, A(1), 8, UnpLP CS-P, A(5);
    IF (S.S.7 = 3) [@PELLET, @NULL]
        @PELLET: Z^NomUnpunished ---> SX
        @NULL: ---> SX

    #Z^CueOFF: ---> S8

S6,    \State 6 UnpLP during start of CS-UP (no pellets)
    2": ---> S7

    #RA(31): ADD A(1), A(7);
    SET T = A(47), B(T) = A(39), C(T) = 2.3; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD I(T); SET T = A(54); SET Q(T) = A(39);
    ADD A(54); SET T = A(54), Q(T) = -987.987;
    SHOW 3, UnpLP Total, A(1), 13, UnpLP CS-UP, A(7) ---> SX

    #Z^CueOFF: ---> S8

S7,    \State 7 UnpLP and pellets during rest of CS-UP
    #RA(31): ADD A(1), A(7);
    SET T = A(47), B(T) = A(39), C(T) = 2.3; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD I(T); SET T = A(54); SET Q(T) = A(39);
    ADD A(54); SET T = A(54), Q(T) = -987.987;
    SHOW 3, UnpLP Total, A(1), 13, UnpLP CS-UP, A(7);
    IF (S.S.7 = 3) [@PELLET, @NULL]
        @PELLET: Z^NomUnpunished ---> SX
        @NULL: ---> SX

    #Z^CueOFF: ---> S8

S8,    \State 8 is the 2 second holdover state for the CS off (cannot trigger CS or pellet)
    2": ---> S2

    #RA(31): ADD A(1), A(3);
    SET T = A(47), B(T) = A(39), C(T) = 2.1; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD E(T); SET T = A(50); SET M(T) = A(39);
    ADD A(50); SET T = A(50), M(T) = -987.987;
    SHOW 3, UnpLP Total, A(1), 18, UnpLP ITI, A(3) ---> SX

S9,    \State 7 is the shutdown holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\State Set 7 - Pellet Dispenser (Unpunished)

S.S.7,
S1,    \State 1 responds to the start command, establishing schedule
    #START: INITCONSTPROBARR Y, A(28);
    RANDD A(44) = Y; SET A(44) = (A(44) - 0.5) * 1" ---> S2

S2,    \State 2 waits to make a pellet available
    A(44)#T: SHOW 3, Unp Pellet Available, 1 ---> S3

    #Z^Shutdown: ---> S5

S3,    \State 3 waits for a lever press to deliver the pellet
    #Z^NomUnpunished: ON ^Pellet; ADD A(8);
    SET T = A(47), B(T) = A(39), C(T) = 3; ADD A(47);
    SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD J(T); SET T = A(55), R(T) = A(39);
    ADD A(55); SET T = A(55), R(T) = -987.987;
    SHOW 4, Pellets Delivered, A(8) ---> S4

    #Z^Shutdown: ---> S5

S4,    \State 4 turns off the pellet dispenser
    0.5": OFF ^Pellet; RANDD A(44) = Y; SET A(44) = (A(44) - 0.5) * 1" ---> S2

    #Z^Shutdown: OFF ^Pellet ---> S5

S5,    \State 5 is a holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\State Set 8 - Unpunished Lever Cue Operator

S.S.8,
S1,    \State 1 responds to the start command, establishing schedule
    #START: SHOW 14, UnpCS in ITI, 0; RANDD A(42) = Z; SET A(42) = A(42) * 1" ---> S2

S2,    \State 2 waits to make a left CS available
    A(42)#T: SHOW 14, UnpCS Available, 1 ---> S3

    #Z^Shutdown: ---> S5

S3,    \State 3 waits for a lever press to deliver the CS
    #Z^CueUnpunish: SHOW 14, UnpCS active, 9;
        IF A(32) > 1.5 [@FLights, @CLICK]
        @FLights: Z^FLightsON; SET T = A(47), B(T) = A(39), C(T) = 6.1;
            ADD A(47); SET T = A(47), B(T) = -987.987, C(T) = -987.987;
            SET A(14) = A(14) + A(29) ---> S4
        @CLICK: ~ClickOn(MG,BOX);~; SET T = A(47), B(T) = A(39), C(T) = 6.2;
            ADD A(47); SET T = A(47), B(T) = -987.987, C(T) = -987.987;
            SET A(14) = A(14) + A(29) ---> S4

    #Z^Shutdown: ---> S5

S4,    \State 4 runs an unpunished CS
    A(45)#T: Z^CueOFF; ~ClickOff(MG,BOX);~; SHOW 14, UnpCS in ITI, 0;
        RANDD A(42) = Z; SET A(42) = A(42) * 1" ---> S2

S5,    \State 5 is a holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\State Set 9 - Magazine Entries

S.S.9,
S1,    \State 1 responds to the start command
    #START: SHOW 5, Magazine Entries, A(9) ---> S2

S2,    \State 2 records magazine entries
    #R^Magazine: ADD A(9); SET T = A(47), B(T) = A(39), C(T) = 5;
    ADD A(47); SET T = A(47), B(T) = -987.987, C(T) = -987.987;
    SET T = A(48); ADD K(T); SET T = A(56), S(T) = A(39);
    ADD A(56); SET T = A(56), S(T) = -987.987;
    SHOW 5, Magazine Entries, A(9) ---> SX

    #Z^Shutdown: ---> S3

S3,    \State 3 is a holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\State Set 10 - Flashing Lights Operator

S.S.10,
S1,    \State 1 responds to the start command, setting the flash duration
    #START: SET A(46) = A(35) * 1" ---> S2

    #Z^Shutdown: ---> S5

S2,    \State 2 responds to the flashing Lights Z-Pulse
    #Z^FLightsON: ON ^LeftLight, ^RightLight, ^Houselight ---> S3

S3,    \State 3 cycles the Lights off
    A(46)#T: OFF ^Houselight, ^LeftLight, ^RightLight ---> S4

    #Z^CueOFF: OFF ^LeftLight, ^RightLight; ON ^Houselight ---> S2

S4,    \State 4 cycles the Lights on
    A(46)#T: ON ^LeftLight, ^RightLight, ^Houselight ---> S3

    #Z^CueOFF: OFF ^LeftLight, ^RightLight; ON ^Houselight ---> S2

S5,    \State 5 is a holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\State Set 11 - Screen refresher

S.S.11,
S1,    \State 1 refreshes the screen
    1.5": SHOW 1, Session Length (min), A(23);
    SHOW 2, Punished Lever (1L 2R), A(30);
    SHOW 3, Punished Cue (1Light 2Click), A(32);
    SHOW 4, Click Frequency, A(33), 5, Click Amplitude, A(34);
    IF S.S.1 > 2 [@MISS, @STAY]
        @MISS: ---> S2
        @STAY: ---> SX

    #START: SHOW 6, CS-P, A(10), 11, CS-UP, A(11) ---> S2

S2,
    #Z^Shutdown: ---> S3

S3,   \State 3 is a holding state
    #START: ---> SX

\-------------------------------------------------------------------------
\Changelog
\Version 1.1 (2016-04-02): Made shock amplitude adjustable, bug fix.
\Version 1.2 (2016-04-15): Customised CS arrays to be a uniform distribution
\    from 40 seconds to 200 seconds in 10 second increments.
\    Added locked on fan when the program loads.
\Version 1.3 (2016-05-07): Fixed a bug where the P array subscript was not
\    incremented properly, leading to inappropriate sealing of the A array and
\    loss of the P array. Also fixed a bug where the B and C arrays were mixed up
\    and the time of an input was put into the C array instead of the B array.
\Version 1.4 (2016-05-10): Fixed timebin shifter bug.
\Version 2.1 (2017-09-4): Finished adjusting script for McNally shock generators,
\    pellet = VI30, CS = VI60 (30-90sec), added leverpress rate array (A(58-67)).
\    More SHOW variables.
\Version 2.2 (2017-09-5): New default variables by box. Calculate suppr ratios.
\Version 2.3 (2017-09-6): Fixed suppression ratio calculation.
\Version 3.0 (2017-09-13): Fixed CS-P and CS-UP timer!! Pressing levers during CS
\    can result in pellets (2sec holdover from CS onset) (removed condition that
\    pellet won't be delivered if other lever is not in ITI (IF s.s.3/6 < 3)).
\    Does not trigger CS or pellet within 2secs after CS offset.
\    Updated SHOW variables.
